generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addon_categories {
  id                     Int                      @id @default(autoincrement())
  name                   String
  is_required            Boolean?
  addons                 addons[]
  menus_addon_categories menus_addon_categories[]
  is_archived            Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
}

model addons {
  id                  Int               @id @default(autoincrement())
  name                String
  price               Int
  is_avaiable         Boolean?          @default(true)
  addon_categories_id Int?
  addon_categories    addon_categories? @relation(fields: [addon_categories_id], references: [id], onUpdate: NoAction)
  is_archived         Boolean           @default(false)
  orderlines          orderLine[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
}

model companies {
  id          Int         @id @default(autoincrement())
  name        String
  address     String?
  locations   locations[]
  users       users[]
  is_archived Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model locations {
  id                              Int                               @id @default(autoincrement())
  name                            String
  address                         String?
  companies_id                    Int?
  companies                       companies?                        @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus_menu_categories_locations menus_menu_categories_locations[]
  tables                          tables[]
  is_archived                     Boolean                           @default(false)
  orders                          orders[]
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @default(now()) @updatedAt
}

model menu_categories {
  id                              Int                               @id @default(autoincrement())
  name                            String
  menus_menu_categories_locations menus_menu_categories_locations[]
  is_archived                     Boolean                           @default(false)
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @default(now()) @updatedAt
}

model menus {
  id                              Int                               @id @default(autoincrement())
  name                            String
  price                           Int
  asseturl                        String?
  description                     String?
  menus_addon_categories          menus_addon_categories[]
  menus_menu_categories_locations menus_menu_categories_locations[]
  is_archived                     Boolean                           @default(false)
  orderlines                      orderLine[]
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @default(now()) @updatedAt
}

model menus_addon_categories {
  id                  Int               @id @default(autoincrement())
  menus_id            Int?
  addon_categories_id Int?
  addon_categories    addon_categories? @relation(fields: [addon_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus               menus?            @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
}

model menus_menu_categories_locations {
  id                 Int             @id @default(autoincrement())
  menus_id           Int?
  locations_id       Int?
  menu_categories_id Int
  is_avaiable        Boolean         @default(true)
  locations          locations?      @relation(fields: [locations_id], references: [id], onUpdate: NoAction)
  menus              menus?          @relation(fields: [menus_id], references: [id], onUpdate: NoAction)
  menu_categories    menu_categories @relation(fields: [menu_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt
}

model users {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  password     String     @unique
  role         Role       @default(USER)
  companies_id Int?
  companies    companies? @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model tables {
  id          Int       @id @default(autoincrement())
  name        String
  assetUrl    String?
  location_id Int
  locations   locations @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  is_archived Boolean   @default(false)
  orders      orders[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

enum Role {
  USER
  ADMIN
  MANAGER
  EDITOR
}

model orders {
  id          Int         @id @default(autoincrement())
  location_id Int
  table_id    Int
  price       Int?        @default(0)
  is_paid     Boolean     @default(false)
  locations   locations   @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tables      tables      @relation(fields: [table_id], references: [id])
  orderLines  orderLine[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model orderLine {
  id           Int         @id @default(autoincrement())
  orders_id    Int
  menus_id     Int
  addons_id    Int?
  quantity     Int         @default(1)
  order_status OrderStatus @default(PENDING)
  orders       orders      @relation(fields: [orders_id], references: [id])
  menus        menus       @relation(fields: [menus_id], references: [id])
  addons       addons?     @relation(fields: [addons_id], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETE
  REJECTED
}
